{"version":3,"sources":["Header.js","Conecta.js","ItemLista.js","Listagem.js","App.js","serviceWorker.js","index.js"],"names":["Header","className","Component","Conecta","axios","create","baseURL","ItemLista","props","src","foto","alt","marca","modelo","ano","Number","preco","toLocaleString","style","currency","Listagem","state","ofertas","navigator","onLine","get","lista","this","setState","data","localStorage","setItem","JSON","stringify","parse","getItem","map","oferta","key","App","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","fetch","response","contentType","headers","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"6OAEqBA,E,iLAEb,OACI,yBAAKC,UAAU,8CACX,yBAAKA,UAAU,aACf,8DACA,6D,GANoBC,a,gCCErBC,E,OAFCC,EAAMC,OAAO,CAACC,QAAS,2BCgBxBC,EAhBE,SAAAC,GACb,OACI,yBAAKP,UAAY,4BACjB,yBAAKQ,IAAKD,EAAME,KAAMC,IAAI,OAAOV,UAAY,iBAC7C,yBAAKA,UAAY,aACjB,wBAAIA,UAAY,cAAcO,EAAMI,MAApC,IAA4CJ,EAAMK,OAAlD,SAAgEL,EAAMM,KACtE,wBAAIb,UAAY,aAAhB,YAAmCc,OAAOP,EAAMQ,OAAOC,eAAe,QAAQ,CAACC,MAAO,WAAYC,SAAU,YCD/FC,G,iNAEjBC,MAAQ,CACJC,QAAS,I,yMAIVC,UAAUC,O,gCACGrB,EAAQsB,IAAI,wC,OAA1BC,E,OACNC,KAAKC,SAAS,CAACN,QAASI,EAAMG,OAItBC,aAAaC,QAAQ,cAAeC,KAAKC,UAAUP,EAAMG,O,wCAGrCG,KAAKE,MAAMJ,aAAaK,QAAQ,gB,QAA9CT,E,OACNC,KAAKC,SAAS,CAACN,QAASI,I,sIAKxB,OACI,yBAAKzB,UAAU,kBACX,yBAAKA,UAAU,OACd0B,KAAKN,MAAMC,QAAQc,KAAI,SAAAC,GAAM,OAE9B,kBAAC,EAAD,CAAWC,IAAOD,EAAOzB,MACzBA,MAASyB,EAAOzB,MAChBC,OAAUwB,EAAOxB,OACjBG,MAASqB,EAAOrB,MAChBF,IAAOuB,EAAOvB,IACdJ,KAAQ2B,EAAO3B,gB,GAhCOR,cCSvBqC,MAXf,WACE,OACI,6BAEA,kBAAC,EAAD,MACA,kBAAC,EAAD,QCEAC,EAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DAsCN,SAASC,EAAgBC,EAAOC,GAC9BzB,UAAU0B,cACPC,SAASH,GACTI,MAAK,SAAAC,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBjC,QACfE,UAAU0B,cAAcQ,YAI1BC,QAAQC,IACN,iHAKEX,GAAUA,EAAOY,UACnBZ,EAAOY,SAASR,KAMlBM,QAAQC,IAAI,sCAGRX,GAAUA,EAAOa,WACnBb,EAAOa,UAAUT,WAO5BU,OAAM,SAAAC,GACLL,QAAQK,MAAM,4CAA6CA,MC3FjEC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDiB1C,SAAkBnB,GACvB,GAAI,kBAAmBzB,UAAW,CAGhC,GADkB,IAAI6C,IAAIC,4BAAwB3B,OAAOC,SAAS2B,MACpDC,SAAW7B,OAAOC,SAAS4B,OAIvC,OAGF7B,OAAO8B,iBAAiB,QAAQ,WAC9B,IAAMzB,EAAK,UAAMsB,4BAAN,6BAEP7B,IAgEV,SAAiCO,EAAOC,GAEtCyB,MAAM1B,GACHI,MAAK,SAAAuB,GAEJ,IAAMC,EAAcD,EAASE,QAAQnD,IAAI,gBAEnB,MAApBiD,EAASG,QACO,MAAfF,IAA8D,IAAvCA,EAAYG,QAAQ,cAG5CvD,UAAU0B,cAAc8B,MAAM5B,MAAK,SAAAC,GACjCA,EAAa4B,aAAa7B,MAAK,WAC7BT,OAAOC,SAASsC,eAKpBnC,EAAgBC,EAAOC,MAG1Bc,OAAM,WACLJ,QAAQC,IACN,oEArFAuB,CAAwBnC,EAAOC,GAI/BzB,UAAU0B,cAAc8B,MAAM5B,MAAK,WACjCO,QAAQC,IACN,iHAMJb,EAAgBC,EAAOC,OCxC/BC,K","file":"static/js/main.85740a48.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\n\r\nexport default class Header extends Component {\r\n    render() {\r\n        return (\r\n            <div className=\"container-fluid bg-primary text-white py-3\">\r\n                <div className=\"container\">\r\n                <h2>Revenda de Veículos Avenida</h2>\r\n                <h3>Ofertas de Black Fridey</h3>\r\n                \r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import axios from 'axios'\r\n\r\nconst Conecta = axios.create({baseURL: 'https://api.sheety.co/'})\r\n\r\nexport default Conecta","import React from 'react'\r\n\r\nconst ItemLista= props =>{\r\n    return (\r\n        <div className = \"card col-sm-3 col-6 mt-2\">\r\n        <img src={props.foto} alt=\"foto\" className = \"card-img-top\"/>\r\n        <div className = \"card-body\">\r\n        <h4 className = \"card-title\">{props.marca} {props.modelo} Ano: {props.ano}</h4>\r\n        <h5 className = \"card-text\"> Preço{Number(props.preco).toLocaleString('pt-br',{style: 'currency', currency: 'BRL'}) } \r\n        \r\n        \r\n        </h5>\r\n        \r\n        \r\n        </div>\r\n        </div>\r\n    )\r\n}\r\nexport default ItemLista","import React, { Component } from 'react'\r\n\r\nimport Conecta from './Conecta'\r\nimport ItemLista from './ItemLista'\r\n\r\nimport './Listagem.css'\r\n\r\nexport default class Listagem extends Component {\r\n\r\n    state = {\r\n        ofertas: []\r\n    }\r\nasync componentDidMount(){\r\n    // verifica se ha conecao com a internet\r\n    if(navigator.onLine){\r\nconst lista = await Conecta.get('2fbc5a9e-29fd-4013-b29d-fb1bc2028c1e')\r\nthis.setState({ofertas: lista.data})\r\n        \r\n        // salva em localstorage os dados para posterior acesso\r\n        // estiver sem conexao\r\n        localStorage.setItem(\"super_noite\", JSON.stringify(lista.data))\r\n    }else{\r\n        // se nao tiver conexao, obtem a lista anteriormente em localStorage\r\n        const lista = await JSON.parse(localStorage.getItem(\"super_noite\"))\r\n        this.setState({ofertas: lista})\r\n    }\r\n}\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"container mt-2\">\r\n                <div className=\"row\">\r\n                {this.state.ofertas.map(oferta => (\r\n                    \r\n                <ItemLista key = {oferta.marca}\r\n                marca = {oferta.marca}\r\n                modelo = {oferta.modelo}\r\n                preco = {oferta.preco}\r\n                ano = {oferta.ano}\r\n                foto = {oferta.foto} />\r\n                \r\n                ))}\r\n                \r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React from 'react';\n\nimport Header from './Header'\nimport Listagem from './Listagem'\n\nfunction App() {\n  return (\n      <div>\n\n      <Header />\n      <Listagem />\n      </div>\n     \n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if ('serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/custom-service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}